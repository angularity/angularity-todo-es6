/* global EscapeKeyDirective:false */

import bind from 'es6-class-util/bind';

/**
 * <p>A directive that detects escape key on the given element and calls the specified attribute.</p>
 */
export default class EscapeKeyDirective {

  /**
   * <p>Create a factory method that will produce an instance for the given <code>attribute</code> when called.</p>
   * @param {string} attribute The attribute that will be applied when the directive activates
   * @returns {Function} A factory method that creates a new instance when called
   */
  static forAttribute(attribute) {
    return function () {
      return new EscapeKeyDirective(attribute);
    };
  }

  /**
   * <p>Constructor.</p>
   * @param {string} attribute The attribute that will be applied when the directive activates
   */
  constructor(attribute) {
    bind(this);
    this.attribute_ = attribute;
  }

  /**
   * <p>The attribute that will be applied when the directive activates.</p>
   * @returns {string}
   */
  get attribute() {
    return this.attribute_;
  }

  /**
   * <p>The link function for the directive.</p>
   * @param {object} scope The scope for the directive
   * @param {object} element JQuery wrapper for the element the attribute is defined on
   * @param {object} attributes A collection of the attributes on the element
   */
  link(scope, element, attributes) {
    var ESCAPE_KEY = 27;
    var action = attributes[this.attribute_];
    if (action) {
      element.on('keydown', function (event) {
        if (event.keyCode === ESCAPE_KEY) {
          scope.$apply(action);
        }
      });
    }
  }

}