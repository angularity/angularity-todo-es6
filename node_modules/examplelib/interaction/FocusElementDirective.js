/* global FocusElementDirective:false */

import bind from 'es6-class-util/bind';

/**
 * <p>A directive that will focus the given element when the specified attribute changes from false to true.</p>
 */
export default class FocusElementDirective {

  /**
   * <p>Create a factory method that will produce an instance for the given <code>attribute</code> when called.</p>
   * @param {string} attribute The attribute that will be applied when the directive activates
   * @returns {Function} A factory method that creates a new instance when called
   */
  static forAttribute(attribute) {
    return /** @ngInject */ function ($timeout) {
      return new FocusElementDirective($timeout, attribute);
    };
  }

  /**
   * <p>Constructor.</p>
   * @param {function} $timeout AngularJS digest-aware setTimeout
   * @param {string} attribute The attribute that will be applied when the directive activates
   */
  constructor($timeout, attribute) {
    bind(this);
    this.$timeout_  = $timeout;
    this.attribute_ = attribute;
  }

  /**
   * <p>The attribute that will be applied when the directive activates.</p>
   * @returns {string}
   */
  get attribute() {
    return this.attribute_;
  }

  /**
   * <p>The link function for the directive.</p>
   * @param {object} scope The scope for the directive
   * @param {object} element JQuery wrapper for the element the attribute is defined on
   * @param {object} attributes A collection of the attributes on the element
   */
  link(scope, element, attributes) {
    var $timeout = this.$timeout_;
    this.unwatch_ = scope.$watch(attributes[this.attribute_], function (value) {
      if (value) {
        $timeout(function () {
          element[0].focus();
        }, 0, false);
      }
    });
    element.on('$destroy', this.unwatch_);
  }

}